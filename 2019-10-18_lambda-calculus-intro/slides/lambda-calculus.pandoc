---
title: "Lambda calculus for dummies"
author: David Luposchainsky
date: 2019-10-19
---

# Lambdas today

## Everyone has them

```javascript
// Javascript
addOne = function(x) { return x+1; } // Old style
addOne = x => x+1;                   // ES6 style
```
. . .
```java
// Java
boilerplate addOne = x -> return x+1;
```
. . .
```c++
// C++
auto addOne = [](int x) { return x+1; }
```
. . .
```haskell
-- Haskell
addOne = \x -> x+1
```

## But why?

- Functions as first class values
- Long forgotten/ignored, then rediscovered

. . .
```haskell
map (\x -> x+1) [1,2,3] -- [2,3,4]
```
. . .
```javascript
http.createServer((request, response) => {
    doStuff(request);
    response.writeHead(200, {'Content-Type': 'text/plain'});
    response.end('Hello World\n');
}).listen(1337, '127.0.0.1');
```

# Back a century

## Same thing, different views

Researching foundations of mathematics and computation

- Turing: imperative machine emulates mathematician
- Church: mathematical construct emulates mathematics

## Turing machines

- Technical and somewhat complicated
- Powerful
- Theoretical use: enormous
- Practical use: saying wrong or useless things on the internet

## Definition of a Turing machine

A Turing machine consists of

$Q$
:  finite set of states

$\Gamma$
:  finite set of tape symbols

$b\in \Gamma$
:  blank symbol

$\Sigma \subseteq \Gamma \setminus \{b\}$
:  set of input symbols

$q_{0}\in Q$
:  initial state

$F\subseteq Q$
:  set of final states

$\delta :(Q\setminus F)\times \Gamma \rightarrow Q\times \Gamma \times \{L,R\}$
:  transition function


## Lambda calculus

- Extremely simple
- Just as powerful
- Theoretical use: enormous
- Practical use: incrementing lists of numbers


# Lambda calculus

## Definition of Lambda Calculus

Terms
:  - $x$
   - $\lambda x. T$
   - $T_1~ T_2$

. . .

Example terms
:   - $\lambda x.~x$
    - $\lambda x.~(\lambda f.~f~(f~x))$

## Definition of Lambda Calculus

Terms
:  - $x$
   - $\lambda x. T$
   - $T_1~ T_2$

Evaluation
:  - $\lambda x. T_x \equiv \lambda y. T_y$
   - $(\lambda x. T)~y \rightsquigarrow T_{x \rightarrow y}$
   - $\lambda x. {\color{lightgray}(}f~ x{\color{lightgray})} \equiv f$

## Evaluation: example 1

$$ (({\color{cyan}\lambda x.~ (\lambda y.~ x)})~ 1)~ 2 $$

. . .

$$ = ((\lambda y. ~ x)_{x \rightarrow 1}) ~  2 $$

. . .

$$ = (\lambda y. ~ 1) 2 $$

. . .

$$ = 1_{y \rightarrow 2} $$

. . .

$$ = 1 $$

## Evaluation: example 2

$$ (({\color{cyan}\lambda f.~ (\lambda x.~  (f~ x))}) ~ \text{double}) ~ 4 $$

. . .

$$ = ((\lambda x.~  (f~ x))_{f \rightarrow \text{double}}) ~ 4 $$

. . .

$$ = (\lambda x.~  (\text{double}~ x)) ~ 4 $$

. . .

$$ = (\text{double}~ x)_{x \rightarrow 4} $$

. . .

$$ = \text{double} ~  4 $$

## What do we need to make this practical?

- numbers
- booleans
- tuples
- lists
- enums

## Numbers

= repeated function application

- $0 := \lambda {\color{orange}f} ~ {\color{cyan}x}. ~ {\color{cyan}x}$
- $1 := \lambda {\color{orange}f} ~ {\color{cyan}x}. ~ {\color{orange}f} ~ {\color{cyan}x}$
- $2 := \lambda {\color{orange}f} ~ {\color{cyan}x}. ~ {\color{orange}f} ~ ({\color{orange}f} ~ {\color{cyan}x})$

. . .

$$
\text{succ} := \lambda n. ~(\lambda {\color{orange}f}~{\color{cyan}x}.~ {\color{orange}f} ~ (n ~ {\color{orange}f} ~ {\color{cyan}x}))
$$

. . .

$$
\text{add} := \lambda m~n. ~(\lambda {\color{orange}f}~{\color{cyan}x}.~ m~{\color{orange}f}~(n~{\color{orange}f}~{\color{cyan}x}))
$$

. . .

$$
\text{mul} := \lambda m~n.~(\lambda {\color{orange}f}~{\color{cyan}x}.~m~(n~{\color{orange}f})~{\color{cyan}x})
$$

## Booleans

= ignore one branch

$$
\begin{aligned}
\text{true}  &:= \lambda {\color{cyan}x}~{\color{orange}y}.~{\color{cyan}x} \\
\text{false} &:= \lambda {\color{cyan}x}~{\color{orange}y}.~{\color{orange}y}
\end{aligned}
$$

. . .

$$
\begin{aligned}
\text{ifThenElse} :=& \lambda p~t~f . ~{\color{lightgray}(}p~t{\color{lightgray})} ~f \\
                   \equiv& \lambda p~t . ~p~t \\
                   \equiv& \lambda p . ~p \\
                   \equiv& \text{id}
\end{aligned}
$$

. . .

$$
\begin{aligned}
\text{not} &:= \lambda {\color{orange}p}.~{\color{orange}p}~\text{false}~\text{true} \\
\text{and} &:= \lambda {\color{orange}p}~{\color{cyan}q}.~{\color{orange}p}~{\color{cyan}q}~{\color{orange}p} \\
\text{or} &:= \lambda {\color{orange}p}~{\color{cyan}q}.~{\color{orange}p}~{\color{orange}p}~{\color{cyan}q}
\end{aligned}
$$

## Pairs/lists

= nil/cons like in Lisp

$$
\begin{aligned}
\text{pair}   &:= \lambda x~y~f.~f~x~y \\
\text{first}  &:= \lambda p.~p~\text{true} \\
\text{second} &:= \lambda p.~p~\text{false} \\
\text{nil}    &:= \lambda x.~\text{true} \\
\text{null}   &:= \lambda p.~p~(\lambda x~y.~\text{false})
\end{aligned}
$$


## Includes, modules

$$
\begin{aligned}
(\lambda {\color{cyan}helper}. &\langle\text{program}\rangle) \\
    & ({\color{cyan}\langle\text{value for helper}\rangle})
\end{aligned}
$$

. . .

$$
\begin{aligned}
(\lambda add. & ~add~3~4) \\
              & (\lambda m~n. ~(\lambda f~x.~ m~f~(n~f~x)))
\end{aligned}
$$

## Prettier: let

$$
\begin{aligned}
&(\lambda {\color{cyan}let}. \\
&    \quad({\color{cyan}let} ~ ({\color{orange}\lambda m~n. ~(\lambda f~x.~ m~f~(n~f~x))})~(\lambda~{\color{orange}add}. \\
&    \quad\quad ~{\color{orange}add}~3~4 )) \\
&)~({\color{cyan}\lambda value~body.~body~value})
\end{aligned}
$$

## Recursion

…but how?

$$
\begin{aligned}
\text{factorial} := \lambda n.~\text{ifThenElse}~&(n>0) \\
                                                                &(n * {\color{cyan}recurse}~(n-1)) \\
                                                                &1
\end{aligned}
$$


## Recursion: fixed point combinator

$$
\begin{aligned}
\text{Y}~{\color{cyan}f} &= {\color{cyan}f}~(\text{Y}~{\color{cyan}f}) \\
    &= {\color{cyan}f}~({\color{cyan}f}~(\text{Y}~{\color{cyan}f})) \\
    &= {\color{cyan}f}~({\color{cyan}f}~({\color{cyan}f}~(\ldots)))
\end{aligned}
$$

. . .

$$
Y = \lambda {\color{cyan}f}.~ (\lambda {\color{orange}x}.~ {\color{cyan}f} ~({\color{orange}x}~ {\color{orange}x})) ~(\lambda {\color{orange}x}.~ {\color{cyan}f} ~({\color{orange}x}~ {\color{orange}x}))
$$


## Y combinator usage

$$
\begin{aligned}
\text{factorialStep} := \lambda {\color{orange}rec}~{\color{cyan}n}.~\text{ifThenElse}~&({\color{cyan}n}>0) \\
                                                                &({\color{cyan}n} * {\color{orange}rec}~({\color{cyan}n}-1)) \\
                                                                &1
\end{aligned}
$$

. . .

$$
\text{factorial} := \text Y ~\text{factorialStep}
$$

## Example

$$
\begin{aligned}
\text{factorial}~3 &= {\color{lightgray}(}\text Y ~\text{factorialStep}{\color{lightgray})} ~ 3 \\
                   &= \text{factorialStep} ~ (\text{Y}~\text{factorialStep})~3 \\
                   &= (\lambda rec.~{\color{cyan}\text{ifThenElse}~(3>0)~(3 \cdot rec~(3-1))~1})~(\text{Y}~\text{factorialStep}) \\
                   &= (\lambda rec.~(3 \cdot rec~2))~(\text{Y}~\text{factorialStep}) \\
                   &= 3 \cdot \text{factorial}~2 \\
                   &= 3 \cdot 2 \cdot 1 \cdot \text{factorial}~0 \\
                   &= 6 \cdot \text{Y}~\text{factorialStep}~0 \\
                   &= 6 \cdot (\lambda rec.~{\color{cyan}\text{ifThenElse}~(0>0)~(0 \cdot rec~(0-1))~1})~(\text{Y}~\text{factorialStep}) \\
                   &= 6 \cdot (\lambda rec.~1)~(\text{Y}~\text{factorialStep}) \\
                   &= 6 \cdot 1 \\
                   &= 6
\end{aligned}
$$

## What now?

- Invent Lisp
- Add types (simply typed LC, Hindley/Milner)
- CPS transform your whole program to make maintenance a nightmare




## Questions?

```
fibo :=
    (\let.
        let (\x _. x)                                   (\ true.
        let (\_ y. y)                                   (\ false.
        let (\x. x)                                     (\ ifThenElse.
        let (\f. (\x. f (x x)) (\x. f (x x)))           (\ Y.
        let (\f x. f x)                                 (\ 1.
        let (\f x. f (f x))                             (\ 2.
        let (\n f x. n (\g h. h (g f)) (\_. x) (\u. u)) (\ pred.
        let (\n. n (\x. false) true)                    (\ =0.
        let (\m n f x. n f (m f x))                     (\ +.
        let (\m n. n pred m)                            (\ -.
        let (\m n. =0 (- m n))                          (\ <=.
            Y (\fib n. ifThenElse (<= n 2)
                       n
                       (+ (fib (- n 1))
                          (fib (- n 2)))))
        ))))))))))
    ) (\value body. body value)
```

## Church-Rosser theorem, evaluation strategies

»Normal forms are unique«

. . .

### Applicative order

- Reduce the rightmost-innermost redex first
- Used by eager languages (Lisps, C, Java, …)
- Might not find normal form even though it exists: $$(\lambda x~y.~x) ~1~ \underbrace{((\lambda x.~x~x)~(\lambda x.~x~x))}_\Omega \rightsquigarrow \bot$$

. . .

### Normal order

- Reduce the leftmost-outermost redex first
- Used by lazy languages (Haskell, Miranda)
- If there is a normal form, it will be reached $$(\lambda x~y.~x) ~1~ \underbrace{((\lambda x.~x~x)~(\lambda x.~x~x))}_\Omega \rightsquigarrow 1$$

## SKI calculus

»Lambda calculus is too complicated!«

$$
\begin{aligned}
{\color{cyan}K}~x~y &\longrightarrow x \\
{\color{cyan}S}~f~g~x & \longrightarrow f~x~(g~x)
\end{aligned}
$$

## Universal iota

»SK calculus is too complicated!«

$$
{\color{cyan}\iota} := \lambda f.~f~S~K = S~(S~I~(K~S))~(K~K)
$$
$$
\begin{aligned}
    K &= (\iota(\iota(\iota\iota))) \\
    S &= (\iota(\iota(\iota(\iota\iota))))
\end{aligned}
$$
